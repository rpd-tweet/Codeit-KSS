// LRU cache
// Time -  | Space - 
import java.util.*;
class Node{
	Node next, prev;
	int key, value;
	Node(int key, int value){
		this.key = key;
		this.value = value;
	}
}

class TestLRUCache{
	HashMap<Integer, Node> map;
	int count, capacity;
	Node head, tail;
	
	TestLRUCache(int capacity){
		map = new HashMap<Integer, Node>();
		head = new Node(0, 0);
		tail = new Node(0, 0);
		this.capacity = capacity;
		count = 0;
		head.next = tail;
		tail.prev = head;
		head.prev = null;
		tail.next = null;		
	}
	
	void deleteNode(Node node){
		node.prev.next = node.next;
		node.next.prev = node.prev;
	}
	
	void addToHead(Node node){
		node.next = head.next;
		head.next.prev = node;
		head.next = node;
		node.prev = head;
	}
	
	void get(int key){
		if(map.get(key) != null){
			System.out.println("Key" + key + " value" + map.get(key).value);
			Node node = map.get(key);
			deleteNode(node);
			addToHead(node);
		}
		else
		System.out.println("-1");
	}
	void set(int key, int value){
		if(map.get(key) != null){
			Node node = map.get(key);
			node.value = value;
			deleteNode(node);
			addToHead(node);
		}
		else{
			Node node = new Node(key, value);
			map.put(key, node);
			if(count< capacity){
				count++;
				addToHead(node);
			}
			else{
				map.remove(tail.prev.key);
				deleteNode(tail.prev);
				addToHead(node);				
			}
		}
	}
}

class LRUCache{
	
	public static void main(String rpd[]){
		TestLRUCache obj = new TestLRUCache(2);
		obj.set(1, 10);
		obj.set(5, 12);
		obj.get(5);
		obj.get(1);
		obj.get(10);
		obj.set(6, 14);
		obj.get(6);
	}
	
}

